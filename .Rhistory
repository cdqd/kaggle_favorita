# days are labelled from 1 to 16 (slightly different to t0 - t15 naming convention)
ds <- grep(paste0("y_", first_day), names(rmsle_fullinfo))
de <- grep(paste0("y_", last_day), names(rmsle_fullinfo))
rmsle_fullinfo %>%
gather_(key = "model", value = "rmsle_component", gather_cols = names(.)[ds:de])
group_by_(.dots = groupby) %>%
summarise(mean_err = sqrt(mean(rmsle_component)),
stdev_err = sqrt(sd(rmsle_component))) %>%
ungroup()
}
# Helper function to summarise rmsle by group for all days of the period
rmsle_summary <- function(first_day, last_day, groupby) {
# days are labelled from 1 to 16 (slightly different to t0 - t15 naming convention)
ds <- grep(paste0("y_", first_day), names(rmsle_fullinfo))
de <- grep(paste0("y_", last_day), names(rmsle_fullinfo))
return(
rmsle_fullinfo %>%
gather_(key = "model", value = "rmsle_component", gather_cols = names(.)[ds:de]) %>%
group_by_(.dots = groupby) %>%
summarise(mean_err = sqrt(mean(rmsle_component)),
stdev_err = sqrt(sd(rmsle_component))) %>%
ungroup()
)
}
rmsle_summary(1, 16, "type")
a <- 4
b <- 7
a:b
names(rmsle_fullinfo)[2:4]
grep("y_1", names(rmsle_fullinfo))
# Helper function to summarise rmsle by group for all days of the period
rmsle_summary <- function(first_day, last_day, groupby) {
# days are labelled from 1 to 16 (slightly different to t0 - t15 naming convention)
ds <- grep(paste0("^y_$", first_day), names(rmsle_fullinfo))
de <- grep(paste0("^y_$", last_day), names(rmsle_fullinfo))
return(
rmsle_fullinfo %>%
gather_(key = "model", value = "rmsle_component", gather_cols = names(.)[ds:de]) %>%
group_by_(.dots = groupby) %>%
summarise(mean_err = sqrt(mean(rmsle_component))) %>%
ungroup()
)
}
rmsle_summary(1, 16, "type")
?regex
# Helper function to summarise rmsle by group for all days of the period
rmsle_summary <- function(first_day, last_day, groupby) {
# days are labelled from 1 to 16 (slightly different to t0 - t15 naming convention)
ds <- grep(paste0("^y_", first_day, "$"), names(rmsle_fullinfo))
de <- grep(paste0("^y_", last_day, "$"), names(rmsle_fullinfo))
return(
rmsle_fullinfo %>%
gather_(key = "model", value = "rmsle_component", gather_cols = names(.)[ds:de]) %>%
group_by_(.dots = groupby) %>%
summarise(mean_err = sqrt(mean(rmsle_component))) %>%
ungroup()
)
}
rmsle_summary(1,16, "Type")
rmsle_summary(1,16, "type")
rmsle_summary(1, 16, "type") %>%
select(type, mean_err) %>%
mutate(overall_compare = mean_err - overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rm(list = ls())
invisible(gc())
load(".RData")
library(tidyverse)
library(data.table)
library(xgboost)
library(knitr)
theme_set(theme_minimal())
# Load additional mapping data
population <- read_csv("city_population_mapping.csv", na = "", locale = locale(encoding = "ISO-8859-1"))
city_population <-
population %>%
filter(nchar(code) == 4 | city_municipality == "Puyo")
item_family_2 <- read_csv("item_type_mapping.csv",  na = "")
# Calculate rmsle components
x <- (val_pred[, -(1:2)] - y_val[, -(1:2)])^2
rmsle_components <- cbind(y_val[, 1:2], x)
rmsle_fullinfo <-
rmsle_components %>%
left_join(stores,
by = c("store_nbr")) %>%
left_join(select(items, -class),
by = c("item_nbr")) %>%
left_join(item_family_2,
by = c("family")) %>%
as.tbl()
overall_rmsle <-
sqrt(mean(unlist(rmsle_fullinfo[, 3:18])))
# Helper function to summarise rmsle by group for all days of the period
rmsle_summary <- function(first_day, last_day, groupby) {
# days are labelled from 1 to 16 (slightly different to t0 - t15 naming convention)
ds <- grep(paste0("^y_", first_day, "$"), names(rmsle_fullinfo))
de <- grep(paste0("^y_", last_day, "$"), names(rmsle_fullinfo))
return(
rmsle_fullinfo %>%
gather_(key = "model", value = "rmsle_component", gather_cols = names(.)[ds:de]) %>%
group_by_(.dots = groupby) %>%
summarise(mean_err = sqrt(mean(rmsle_component))) %>%
ungroup()
)
}
# RMSLE by day
results_table <-
results_table %>%
mutate(weekend = case_when(
day %in% c("Sat", "Sun") ~ 1,
TRUE ~ 0),
after_payday = as.numeric(date - as.Date("2017-07-31")),
daynum = c(1:16))
# Add features to summarise & analyse by
varimp_all <-
varimp_all %>%
mutate(day = lubridate::wday(as.Date("2017-07-26") + bst, label = T),
stat_group = case_when(
grepl(pattern = "mean", x = Feature) ~ "mean",
grepl(pattern = "sd", x = Feature) ~ "standard_dev",
grepl(pattern = "p[0-9]", x = Feature) ~ "quantile",
TRUE ~ "sum_promos"),
dow_feature = case_when(
grepl(pattern = "dow", x = Feature) ~ 1,
TRUE ~ 0),
data_period = str_extract(str_extract(Feature, "(_)([a-z])*[0-9]+"), "[0-9]+"))
sample <- c(1, 7500, 80001, 110000)
# 4 sampled item/store combinations
plot_frame <- rbind(
cbind(y_val[sample, -(1:2)], data.frame(obs = factor(1:4), type = rep("Actual", 4))),
cbind(val_pred[sample, -(1:2)], data.frame(obs = factor(1:4), type = rep("Predicted", 4)))
) %>%
gather(key = "date", value = "log_unit_sales", -obs, -type) %>%
arrange(obs, type) %>%
mutate(date = rep(seq.Date(as.Date("2017-07-26"), by = "day", length.out = 16), times = 8))
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5))
y_val_sum <- summary_helper(y_val, store_nbr, logscale = T)
val_pred_sum <- summary_helper(val_pred, store_nbr, logscale = T)
# Stores 1 to 4
plot_frame <- rbind(
cbind(y_val_sum[1:4, ], data.frame(type = rep("Actual", 4))),
cbind(val_pred_sum[1:4, ], data.frame(type = rep("Predicted", 4)))
) %>%
gather(key = "date", value = "log_unit_sales", -store_nbr, -type) %>%
arrange(store_nbr, type) %>%
mutate(date = rep(seq.Date(as.Date("2017-07-26"), by = "day", length.out = 16), times = 8))
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~ store_nbr) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5))
results_table %>%
ggplot(aes(x = date, y = val_rmse,  fill = day, colour = day)) +
geom_point(size = 3, shape = 17) +
scale_x_date(date_breaks = "1 day") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5))
rmsle_summary(1, 16, c("state", "city")) %>%
select(state, city, mean_err) %>%
left_join(y = select(city_population,
city_municipality, population),
by = c("city" = "city_municipality")) %>%
mutate(overall_compare = mean_err - overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rmsle_summary(1, 1, c("state", "city")) %>%
select(state, city, mean_err) %>%
left_join(y = select(city_population,
city_municipality, population),
by = c("city" = "city_municipality")) %>%
mutate(overall_compare = mean_err - overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, "type") %>%
select(type, mean_err) %>%
mutate(overall_compare = mean_err - overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, "cluster") %>%
select(cluster, mean_err) %>%
mutate(overall_compare = mean_err - overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, c("family", "perishable")) %>%
select(family, perishable, mean_err) %>%
mutate(overall_compare = mean_err - overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, "family_2") %>%
select(family_2, mean_err) %>%
mutate(overall_compare = mean_err - overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
varimp_all %>%
group_by(bst) %>%
mutate(rn = row_number()) %>%
filter(rn <= 2) %>%
ungroup() %>%
select(bst, Feature, Gain, day) %>%
knitr::kable(format = "markdown", digits = 3)
varimp_summary_group <-
varimp_all %>%
group_by(stat_group, dow_feature, data_period) %>%
summarise(`Mean Gain` = mean(Gain)) %>%
ungroup() %>%
arrange(-`Mean Gain`) %>%
mutate(Cluster = Ckmeans.1d.dp::Ckmeans.1d.dp(`Mean Gain`)$cluster)
varimp_summary_group[1:15, ] %>%
mutate(`Feature Group` = paste0(stat_group, "_",
ifelse(dow_feature == 1, "dow_", ""),
data_period, "days"),
Cluster = as.character(Cluster)) %>%
mutate(`Feature Group` = factor(`Feature Group`, rev(unique(`Feature Group`)))) %>%
ggplot(aes(x = `Feature Group`, y = `Mean Gain`, fill = Cluster, colour = Cluster)) +
geom_bar(stat = "identity", position = "identity", width = 0.05) +
coord_flip()
rmsle_summary(1, 16, c("state", "city")) %>%
select(state, city, mean_err) %>%
left_join(y = select(city_population,
city_municipality, population),
by = c("city" = "city_municipality")) %>%
mutate(overall_compare = mean_err - overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
sample <- c(1, 7500, 80001, 110000)
# 4 sampled item/store combinations
plot_frame <- rbind(
cbind(y_val[sample, -(1:2)], data.frame(obs = factor(1:4), type = rep("Actual", 4))),
cbind(val_pred[sample, -(1:2)], data.frame(obs = factor(1:4), type = rep("Predicted", 4)))
) %>%
gather(key = "date", value = "log_unit_sales", -obs, -type) %>%
arrange(obs, type) %>%
mutate(date = rep(seq.Date(as.Date("2017-07-26"), by = "day", length.out = 16), times = 8))
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5))
y_val_sum <- summary_helper(y_val, store_nbr, logscale = T)
val_pred_sum <- summary_helper(val_pred, store_nbr, logscale = T)
# Stores 1 to 4
plot_frame <- rbind(
cbind(y_val_sum[1:4, ], data.frame(type = rep("Actual", 4))),
cbind(val_pred_sum[1:4, ], data.frame(type = rep("Predicted", 4)))
) %>%
gather(key = "date", value = "log_unit_sales", -store_nbr, -type) %>%
arrange(store_nbr, type) %>%
mutate(date = rep(seq.Date(as.Date("2017-07-26"), by = "day", length.out = 16), times = 8))
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~ store_nbr) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5))
results_table %>%
ggplot(aes(x = date, y = val_rmse,  fill = day, colour = day)) +
geom_point(size = 3, shape = 17) +
scale_x_date(date_breaks = "1 day") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5))
rmsle_summary(1, 16, c("state", "city")) %>%
select(state, city, mean_err) %>%
left_join(y = select(city_population,
city_municipality, population),
by = c("city" = "city_municipality")) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, "type") %>%
select(type, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, "cluster") %>%
select(cluster, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, c("family", "perishable")) %>%
select(family, perishable, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, "family_2") %>%
select(family_2, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
knitr::kable(format = "markdown", digits = 3)
varimp_all %>%
group_by(bst) %>%
mutate(rn = row_number()) %>%
filter(rn <= 2) %>%
ungroup() %>%
select(bst, Feature, Gain, day) %>%
knitr::kable(format = "markdown", digits = 3)
varimp_summary_group <-
varimp_all %>%
group_by(stat_group, dow_feature, data_period) %>%
summarise(`Mean Gain` = mean(Gain)) %>%
ungroup() %>%
arrange(-`Mean Gain`) %>%
mutate(Cluster = Ckmeans.1d.dp::Ckmeans.1d.dp(`Mean Gain`)$cluster)
varimp_summary_group[1:15, ] %>%
mutate(`Feature Group` = paste0(stat_group, "_",
ifelse(dow_feature == 1, "dow_", ""),
data_period, "days"),
Cluster = as.character(Cluster)) %>%
mutate(`Feature Group` = factor(`Feature Group`, rev(unique(`Feature Group`)))) %>%
ggplot(aes(x = `Feature Group`, y = `Mean Gain`, fill = Cluster, colour = Cluster)) +
geom_bar(stat = "identity", position = "identity", width = 0.05) +
coord_flip()
?kable
sample <- c(1, 7500, 80001, 110000)
# 4 sampled item/store combinations
plot_frame <- rbind(
cbind(y_val[sample, -(1:2)], data.frame(obs = factor(1:4), type = rep("Actual", 4))),
cbind(val_pred[sample, -(1:2)], data.frame(obs = factor(1:4), type = rep("Predicted", 4)))
) %>%
gather(key = "date", value = "log_unit_sales", -obs, -type) %>%
arrange(obs, type) %>%
mutate(date = rep(seq.Date(as.Date("2017-07-26"), by = "day", length.out = 16), times = 8))
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5))
y_val_sum <- summary_helper(y_val, store_nbr, logscale = T)
val_pred_sum <- summary_helper(val_pred, store_nbr, logscale = T)
# Stores 1 to 4
plot_frame <- rbind(
cbind(y_val_sum[1:4, ], data.frame(type = rep("Actual", 4))),
cbind(val_pred_sum[1:4, ], data.frame(type = rep("Predicted", 4)))
) %>%
gather(key = "date", value = "log_unit_sales", -store_nbr, -type) %>%
arrange(store_nbr, type) %>%
mutate(date = rep(seq.Date(as.Date("2017-07-26"), by = "day", length.out = 16), times = 8))
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~ store_nbr) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5))
results_table %>%
ggplot(aes(x = date, y = val_rmse,  fill = day, colour = day)) +
geom_point(size = 3, shape = 17) +
scale_x_date(date_breaks = "1 day") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5))
rmsle_summary(1, 16, c("state", "city")) %>%
select(state, city, mean_err) %>%
left_join(y = select(city_population,
city_municipality, population),
by = c("city" = "city_municipality")) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, "type") %>%
select(type, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, "cluster") %>%
select(cluster, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, c("family", "perishable")) %>%
select(family, perishable, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
kable(format = "markdown", digits = 3)
rmsle_summary(1, 16, "family_2") %>%
select(family_2, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
kable(format = "markdown", digits = 3)
varimp_all %>%
group_by(bst) %>%
mutate(rn = row_number()) %>%
filter(rn <= 2) %>%
ungroup() %>%
select(bst, Feature, Gain, day) %>%
kable(format = "markdown", digits = 3)
varimp_summary_group <-
varimp_all %>%
group_by(stat_group, dow_feature, data_period) %>%
summarise(`Mean Gain` = mean(Gain)) %>%
ungroup() %>%
arrange(-`Mean Gain`) %>%
mutate(Cluster = Ckmeans.1d.dp::Ckmeans.1d.dp(`Mean Gain`)$cluster)
varimp_summary_group[1:15, ] %>%
mutate(`Feature Group` = paste0(stat_group, "_",
ifelse(dow_feature == 1, "dow_", ""),
data_period, "days"),
Cluster = as.character(Cluster)) %>%
mutate(`Feature Group` = factor(`Feature Group`, rev(unique(`Feature Group`)))) %>%
ggplot(aes(x = `Feature Group`, y = `Mean Gain`, fill = Cluster, colour = Cluster)) +
geom_bar(stat = "identity", position = "identity", width = 0.05) +
coord_flip()
?labs
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5)) +
labs(y = "Log(Sales)", x = NA)
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5)) +
labs(y = "Log(Sales)", x = "none")
# 4 sampled item/store combinations
plot_frame <- rbind(
cbind(y_val[sample, -(1:2)], data.frame(obs = factor(1:4), type = rep("Actual", 4))),
cbind(val_pred[sample, -(1:2)], data.frame(obs = factor(1:4), type = rep("Predicted", 4)))
) %>%
gather(key = "date", value = "log_unit_sales", -obs, -type) %>%
arrange(obs, type) %>%
mutate(date = rep(seq.Date(as.Date("2017-07-26"), by = "day", length.out = 16), times = 8))
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5)) +
labs(y = "Log(Sales)", x = "none")
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5)) +
labs(y = "Log(Sales)", x = NA)
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5)) +
labs(y = "Log(Sales)", x = NULL)
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5)) +
labs(y = "Log(Sales)", x = NULL, type = NULL)
plot_frame %>%
ggplot(aes(x = date, y = log_unit_sales, colour = type)) +
geom_line() +
scale_x_date(date_breaks = "1 day") +
facet_wrap(~obs) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.5)) +
labs(y = "Log(Sales)", x = NULL, colour = NULL)
?kable
varimp_all %>%
group_by(bst) %>%
mutate(rn = row_number(),
bst = bst + 1) %>%
filter(rn <= 2) %>%
ungroup() %>%
select(bst, Feature, Gain, day) %>%
kable(format = "markdown", digits = 3,
col.names = c("Day"))
varimp_all %>%
group_by(bst) %>%
mutate(rn = row_number()) %>%
filter(rn <= 2) %>%
ungroup() %>%
mutate(bst = bst + 1)
varimp_all %>%
group_by(bst) %>%
mutate(rn = row_number()) %>%
filter(rn <= 2) %>%
ungroup() %>%
mutate(bst = bst + 1) %>%
select(bst, day, Feature, Gain) %>%
kable(format = "markdown", digits = 3,
col.names = c("Prediction period day", "Day of week", "Variable", "Average Gain"))
varimp_all %>%
group_by(bst) %>%
mutate(rn = row_number()) %>%
filter(rn <= 2) %>%
ungroup() %>%
mutate(bst = bst + 1) %>%
select(bst, day, Feature, Gain) %>%
kable(format = "markdown", digits = 3,
col.names = c("Prediction period day", "Day of week", "Variable", "Gain"))
?toupper
View(bst_5)
rmsle_summary(1, 16, c("family", "perishable")) %>%
select(family, perishable, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle,
family = gsub("(?<=\\b)([a-z])", "\\U\\1", tolower(x), perl=TRUE)) %>%
arrange(mean_err) %>%
kable(format = "markdown", digits = 3,
col.names = c("Item Family", "Perishable", "RMSLE", "Relative difference to Overall RMSLE"))
rmsle_summary(1, 16, c("family", "perishable")) %>%
select(family, perishable, mean_err) %>%
mutate(overall_compare = (mean_err - overall_rmsle) / overall_rmsle) %>%
arrange(mean_err) %>%
kable(format = "markdown", digits = 3,
col.names = c("Item Family", "Perishable", "RMSLE", "Relative difference to Overall RMSLE"))
